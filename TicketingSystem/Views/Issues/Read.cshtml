@model TicketingSystem.Models.Issue

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.IssueId)
    <div class="row">
        <div class="col-md-3 bs-callout-right">
            <ul class="list-group">
                <li class="list-group-item">Issuer: <strong>@Html.DisplayFor(model => model.User.Firstname)</strong></li>
                <li class="list-group-item">Priority: <strong>@Html.DisplayFor(model => model.Priority)</strong></li>
                <li class="list-group-item">Status: <strong>@Html.DisplayFor(model => model.IssueStatus)</strong></li>
                <li class="list-group-item">Created on: <strong>@Html.DisplayFor(model => model.Created)</strong></li>
                @if (((string)ViewBag.userRole.ToString() == "Dispatcher") || ((string)ViewBag.userRole.ToString() == "Solver"))
                {
                <li class="list-group-item">@Html.LabelFor(model => model.Solver_Id, "Solver_Id", htmlAttributes: new { @class = "control-label col-md-2" }): @Html.DropDownList("Solver_Id", null, htmlAttributes: new { @class = "form-control", @onchange = "EditSolver(this.value)" })</li>
                }
            </ul>
        </div>
        <div class="col-md-7 bs-callout-left bs-callout-info">
                <h4>@Html.DisplayFor(model => model.Subject)</h4>
                <p>@Html.DisplayFor(model => model.Content)</p>
        </div>
    </div>

                if (ViewBag.Replies != null)
                {
                    ICollection<TicketingSystem.Models.IssueReply> replies = ViewBag.Replies;
                    foreach (TicketingSystem.Models.IssueReply ir in replies)
                    {
                        string solved = string.Empty;
                        if (Model.User_Id == ir.User_Id)
                        {
                            if (ir.IsSolved == true) { solved = "I closed this ticket."; }
                    <div class="row">
                        <div class="col-md-3"></div>
                        <div class="col-md-7 bs-callout-left bs-callout-info-left">
                            <h4>@Html.DisplayFor(model => model.User.Firstname)</h4>
                            <p>@Html.Raw(ir.Content)</p>
                            <h6><small>@Html.Raw(ir.Created)</small> <small>@Html.Raw(solved)</small></h6>
                        </div>
                    </div>

            }
            else
            {
                if (ir.IsSolved == true) { solved = "I assume this solved the issue."; }
                <div class="row">
                    <div class="col-md-3"></div>
                    <div class="col-md-7 offset-md-7 bs-callout-right bs-callout-success-right">
                        <h4>@Html.DisplayFor(model => ir.User.Firstname)</h4>
                        <p>@Html.Raw(ir.Content)</p>
                        <h6><small>@Html.Raw(ir.Created)</small> <small>@Html.Raw(solved)</small></h6>
                    </div>
                </div>
            }
        }
    }

    string Role = (string)ViewBag.userRole.ToString();
    string currentUser = (string)ViewBag.currentUser.ToString();
    if (Model.User_Id == currentUser) { Role = "User"; }
    //if (Model.Solver_Id != currentUser) { Role = string.Empty; }
    switch (Model.IssueStatus)
    {
        case TicketingSystem.Models.Status.assigned:
        case TicketingSystem.Models.Status.@new:
        case TicketingSystem.Models.Status.open:
        case TicketingSystem.Models.Status.solved:
        case TicketingSystem.Models.Status.waiting:

            switch (Role)
            {

                case "Administrator":
                case "Manager":
                case "Dispatcher":
                case "Solver":
                    if (currentUser == Model.Solver_Id)
                    {
                    <div class="row">
                        <div class="col-md-3"></div>
                        <div class="col-md-7 offset-md-7 bs-callout-right bs-callout-success-right">
                            <h4>@Html.DisplayFor(model => model.Solver.Firstname)</h4>
                            <div class="form-group">
                                @Html.TextArea("Reply", new { @class = "form-control", @rows = "8", @style = "min-width: 100%" })
                            </div>
                            @Html.CheckBox("Solved") 
                            I assume this solved your problem.
                            <div class="form-group">
                                <div class="pull-right">
                                    <input type="submit" value="Reply" class="btn btn-success" />
                                </div>
                            </div>
                        </div>
                    </div>
                    }
                    break;
                case "User":

                    <div class="row">
                        <div class="col-md-3"></div>
                        <div class="col-md-7 bs-callout-left bs-callout-info-left">
                            <h4>@Html.DisplayFor(model => model.User.Firstname)</h4>
                            <div class="form-group">
                                @Html.TextArea("Reply", new { @class = "form-control", @rows = "8", @style = "min-width: 100%" })
                            </div>
                            <p class="pull-right">This solved my problem.</p>
                            @Html.CheckBox("Solved", new { @class = "pull-right" }) 
                            <div class="form-group">
                                <div class="pull-left">
                                    <input type="submit" value="Reply" class="btn btn-info" />
                                </div>
                            </div>
                        </div>
                    </div>

                    break;
                default:
                    break;
            }
            break;

        case TicketingSystem.Models.Status.canceled:
        case TicketingSystem.Models.Status.closed:
        case TicketingSystem.Models.Status.denied:
        default:

            break;
    }
}
<p>
<p>
    @if ((string)ViewBag.userRole.ToString() != "User")
    {
        <button type="button" class="btn btn-primary" onclick="location.href='@Url.Action("Edit", "Issues", new { id = Model.IssueId })'">Edit</button>
    }
        <button type="button" class="btn btn-secondary" onclick="location.href='@Url.Action("Index", "Issues", new { id = Model.IssueId })'">Go back</button>
    @if (Model.IsDone == false)
    {
        <button type="button" class="btn btn-danger pull-right" data-toggle="modal" data-target="#cancelTicket">Cancel this ticket</button>
using (Html.BeginForm("Cancel", "Issues"))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.IssueId)
    <div class="modal fade" id="cancelTicket" tabindex="-1" role="dialog" aria-labelledby="cancelation" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title" id="cancelation">Cancel this ticket</h4>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to cancel this ticket? If yes, why?</p>
                    <div class="form-group">
                        @Html.TextArea("Reply", new { @class = "form-control", @rows = "8", @style = "min-width: 100%" })
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
                    <input type="submit" value="Cancel" class="btn btn-danger" />
                </div>
            </div>
        </div>
    </div>
}
    }
</p>
<script>
    function EditSolver(val)
    {
        window.location.href="/Issues/EditSolver?id="+ @Model.IssueId +"&solver="+ val;
    }
</script>